// GraphQL schema
type Stake {
  user: String!
  sAmount: Float!
  stSAmount: Float!
  lockPeriod: Int!
  beetsRewards: Float!
  afrovibeRewards: Float!
  votingPower: Float!
}

type Stake @entity {
  id: ID!
  user: Bytes!
  amount: BigInt!
  lockPeriod: BigInt!
  timestamp: BigInt!
}

type Unstake @entity {
  id: ID!
  user: Bytes!
  amount: BigInt!
  penalty: BigInt!
  timestamp: BigInt!
}

type RewardClaim @entity {
  id: ID!
  user: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type SonicPointRedemption @entity {
  id: ID!
  user: Bytes!
  points: BigInt!
  timestamp: BigInt!
}

type BridgedToken @entity {
  id: ID!
  user: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type Delegated @entity {
  id: ID!
  user: Bytes!
  validator: Bytes!
  amount: BigInt!
  timestamp: BigInt!
}

type Proposal @entity {
  id: ID!
  proposalId: BigInt!
  descriptionHash: Bytes!
  timestamp: BigInt!
}

type RevenueShare {
  creator: String!
  amount: Float! # In millions
  stream: String!
  sharePercentage: Float! # 8-90%
}
type Subsidy {
  amount: Float! # S token subsidies
  recipient: String!
}

type CulturalHub {
  id: String!
  ethnicGroup: String!
  members: Int!
  revenue: BigInt!
}
type MusicStream {
  artist: String!
  track: String!
  revenue: BigInt!
  nftId: String
}
type VirtualEvent {
  id: String!
  creator: String!
  attendees: Int!
  revenue: BigInt!
}

type BrandPartnership {
  brand: String!
  creator: String!
  amount: BigInt!
}
type PremiumSubscription {
  user: String!
  amount: BigInt!
  tier: String!
}
